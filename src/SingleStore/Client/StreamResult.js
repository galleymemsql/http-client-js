/**
 * SingleStore HTTP API Spec
 * This API allows you to execute SQL statements against a SingleStore database.  It supports all statements that can be run in a direct database connection, and uses conventional data type conversion.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Column from './Column';
import RowValue from './RowValue';

/**
 * The StreamResult model module.
 * @module SingleStore/Client/StreamResult
 * @version 2.0.0
 */
class StreamResult {
    /**
     * Constructs a new <code>StreamResult</code>.
     * An object describing a single result set.
     * @alias module:SingleStore/Client/StreamResult
     * @param rows {Array.<Array.<module:SingleStore/Client/RowValue>>} An array of tuples, one for each row in the result set
     * @param columns {Array.<module:SingleStore/Client/Column>} An array of objects describing each column.
     */
    constructor(rows, columns) { 
        
        StreamResult.initialize(this, rows, columns);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, rows, columns) { 
        obj['rows'] = rows;
        obj['columns'] = columns;
    }

    /**
     * Constructs a <code>StreamResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:SingleStore/Client/StreamResult} obj Optional instance to populate.
     * @return {module:SingleStore/Client/StreamResult} The populated <code>StreamResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StreamResult();

            if (data.hasOwnProperty('rows')) {
                obj['rows'] = ApiClient.convertToType(data['rows'], [Array]);
            }
            if (data.hasOwnProperty('columns')) {
                obj['columns'] = ApiClient.convertToType(data['columns'], [Column]);
            }
        }
        return obj;
    }


}

/**
 * An array of tuples, one for each row in the result set
 * @member {Array.<Array.<module:SingleStore/Client/RowValue>>} rows
 */
StreamResult.prototype['rows'] = undefined;

/**
 * An array of objects describing each column.
 * @member {Array.<module:SingleStore/Client/Column>} columns
 */
StreamResult.prototype['columns'] = undefined;






export default StreamResult;

